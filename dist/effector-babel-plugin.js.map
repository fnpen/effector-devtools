{
  "version": 3,
  "sources": ["../src/babel-plugin/index.ts"],
  "sourcesContent": ["import { declare } from \"@babel/helper-plugin-utils\";\n// import syntaxJsonStrings from \"@babel/plugin-syntax-json-strings\";\n// import type * as t from \"@babel/types\";\n// import type { NodePath } from \"@babel/traverse\";\nimport { NodePath, PluginPass, types as t } from \"@babel/core\";\n// import effectorPlugin from 'effector/babel-plugin';\n\nconst replaceToDevtools = [\"effector\"];\n\nexport interface Options {\n  effector?: any;\n  skipEffectorPlugin?: boolean;\n}\n\nexport default declare((api, options: Options = {}) => {\n  api.assertVersion(7);\n\n  // const { effector = {}, skipEffectorPlugin = false } = options;\n\n  const importVisitor = {\n    ImportDeclaration(path: NodePath<t.ImportDeclaration>, state: PluginPass) {\n      if (t.isLiteral(path.node.source)) {\n        if (replaceToDevtools.includes(path.node.source.value)) {\n          path.node.source.value = \"effector-devtools-ng/injector\";\n        }\n      }\n    },\n  };\n\n  // const instance = effectorPlugin(api, { addLoc: true, addNames: true, ...effector });\n\n  return {\n    name: \"effector-devtools-ng/babel-plugin\",\n    visitor: {\n      \n      Program: {\n        enter(path, state) {\n          path.traverse(importVisitor, state);\n\n          // if (!skipEffectorPlugin) {\n          //   instance.pre();\n          //   path.traverse(instance.visitor, {\n          //     ...state,\n          //     ...instance,\n          //   });\n          //   instance.post();\n          // }\n        },\n      },\n    },\n  };\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAwB;AAIxB,kBAAiD;AAGjD,MAAM,oBAAoB,CAAC,UAAU;AAOrC,IAAO,2BAAQ,oCAAQ,CAAC,KAAK,UAAmB,CAAC,MAAM;AACrD,MAAI,cAAc,CAAC;AAInB,QAAM,gBAAgB;AAAA,IACpB,kBAAkB,MAAqC,OAAmB;AACxE,UAAI,YAAAA,MAAE,UAAU,KAAK,KAAK,MAAM,GAAG;AACjC,YAAI,kBAAkB,SAAS,KAAK,KAAK,OAAO,KAAK,GAAG;AACtD,eAAK,KAAK,OAAO,QAAQ;AAAA,QAC3B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAIA,SAAO;AAAA,IACL,MAAM;AAAA,IACN,SAAS;AAAA,MAEP,SAAS;AAAA,QACP,MAAM,MAAM,OAAO;AACjB,eAAK,SAAS,eAAe,KAAK;AAAA,QAUpC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": ["t"]
}
